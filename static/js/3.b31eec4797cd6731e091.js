webpackJsonp([3],{"8/5j":function(e,n){},JFV8:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"container"},[t("div",{staticClass:"card mb-3"},[t("div",{staticClass:"card-body"},[t("h4",{staticClass:"mt-3"},[t("b",[e._v("项目搭建过程")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("基于 vue-cli 脚手架构建，记录一下配置的过程")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#anchor1"}},[e._v("1、vue-cli 生成项目基本结构")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor2"}},[e._v("2、API代理")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor3"}},[e._v("3、配置 vue-router")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor4"}},[e._v("4、配置 vuex")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor5"}},[e._v("5、引入 axios")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor6"}},[e._v("6、配置全局工具函数 utils")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor7"}},[e._v("7、全局引入 element-ui")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#anchor8"}},[e._v("8、引入样式及字体图标")])])]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor1"}},[e._v("1、vue-cli 生成项目基本结构")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("  \n        npm install -g vue-cli\n\n        vue init webpack vue-element\n      ")]),e._v(" "),t("p",[e._v("生成中，选择使用\n        "),t("code",[e._v("vue-router")]),e._v(" 及\n        "),t("code",[e._v("eslint")]),e._v("，不使用单元测试")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor2"}},[e._v("2、API代理")]),e._v(" "),t("p",[e._v("在\n        "),t("code",[e._v("config")]),e._v(" 目录下新建文件\n        "),t("code",[e._v("proxy.js")]),e._v("，添加 http-proxy-middleware 远程API接口")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        const api = [\n          '/auth',\n          '/api'\n        ]\n        \n        const option = {\n          target: 'http://some-domain.com',\n          changeOrigin: true\n        }\n\n        let proxy = {}\n        api.forEach(item => { proxy[item] = option })\n        \n        module.exports = proxy\n      ")]),e._v(" "),t("p",[e._v("修改\n        "),t("code",[e._v("config")]),e._v(" 目录中的\n        "),t("code",[e._v("index.js")]),e._v(" 配置：proxyTable，并把 autoOpenBrowser 置为 true")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        const proxy = require('./proxy')\n\n        ...\n        \n        dev: {\n          ...\n          proxyTable: proxy,\n          autoOpenBrowser: true,\n          ...\n        }\n      ")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor3"}},[e._v("3、配置 vue-router")]),e._v(" "),t("p",[e._v("更改\n        "),t("code",[e._v("router")]),e._v(" 目录下的\n        "),t("code",[e._v("index.js")]),e._v(" 文件，加上勾子函数及路由配置")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        // 静态路由\n        import routes from './routes'\n\n        // 路由跳转前的勾子函数，可做权限验证、动画、浏览器导航历史记录等\n        import beforeEachHooks from './before-each-hooks'\n\n        let router = new Router({\n          // 去掉url上的/#/号，需要后台(nginx等)做相应配置：404时配置到/index.html，由vue的前端路由*处理\n          mode: 'history',\n        \n          // router-link匹配路由时的样式，用于选中时的样式处理\n          linkActiveClass: 'active',\n          linkExactActiveClass: 'exact-active',\n        \n          // 静态路由\n          routes: routes,\n        \n          // 路由跳转时，返回到顶部\n          scrollBehavior: (to, from, savedPosition) => {\n            return savedPosition || { x: 0, y: 0 }\n          }\n        })\n\n        // 路由勾子数据\n        Object.keys(beforeEachHooks).forEach(hook => {\n          router.beforeEach(beforeEachHooks[hook])\n        })\n      ")]),e._v(" "),t("p",[t("code",[e._v("before-each-hooks.js")]),e._v("中处理页面title和权限验证")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        checkLoginAuth(to, from, next) {\n          // 设置页面的title\n          if (to.meta.title) {\n            document.title = to.meta.title\n          }\n      \n          // 对设置了requiresAuth的meta路由验证权限\n          if (to.matched.some(record => record.meta.requiresAuth)) {\n            // 权限验证方法，根据业务需要自行编写\n            let permission = getPermission()\n\n            if (!permission) {\n              next({\n                path: '/login',\n                query: { redirect: to.fullPath }\n              })\n            } else {\n              next()\n            }\n          } else {\n            // 不需要权限的路由，一定要调用 next()\n            next()\n          }\n\n          function getPermission() {\n            // ...验证权限\n\n            return true\n          }\n        }\n      ")]),e._v(" "),t("p",[e._v("然后在\n        "),t("code",[e._v("routes")]),e._v("中为需要权限验证的路由添加\n        "),t("code",[e._v("meta")]),e._v("元信息")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("        path: '/admin',\n        component: r => require.ensure([], () => r(require('@/views/Admin')), 'app-admin'),\n        meta: {\n          requiresAuth: true,\n          // 根据业务设置权限信息\n          authorization: 'org_corp,org_admin'\n        }\n      ")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor4"}},[e._v("4、配置 vuex")]),e._v(" "),t("div",[e._v("（1）安装 vuex")]),e._v(" "),t("p",[t("code",[e._v("npm install -S vuex")])]),e._v(" "),t("p",[e._v("（2）在\n        "),t("code",[e._v("src")]),e._v("目录下新建\n        "),t("code",[e._v("store")]),e._v("目录，在其中新建\n        "),t("code",[e._v("modules")]),e._v("目录和\n        "),t("code",[e._v("index.js")]),e._v("文件")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        // 获取 ./modules 目录下所有文件，作为 vuex 的一个模块\n        const files = require.context('./modules/', true, /\\.js$/)\n        ...\n\n        export default new Vuex.Store({\n          modules: modules,\n          strict: process.env.NODE_ENV !== 'production'\n        })\n      ")]),e._v(" "),t("p",[t("code",[e._v("modules")]),e._v("目录中的文件格式参考 vuex 官网：")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        // 包含了全部的应用层级状态，全局访问 this.$store.state.\n        // 虽然将所有的状态放到Vuex会使状态变化更易显示和易调试，但也会使代码变得冗长和不直观。\n        // 如果有些状态严格属于单个组件，最好还是作为组件的本地状态。\n        const state = {\n          token: null\n        }\n        // store 的计算属性，全局访问 this.$store.getters.\n        const getters = {\n          userToken: state => state.token\n        }\n        \n        // Action 类似于 mutation，不同在于：\n        // Action 提交的是 mutation，而不是直接变更状态\n        // Action 可以包含任意异步操作\n        // 全局访问 this.$store.dispatch('')\n        const actions = {\n          getToken({ commit }) {\n            // 可包含异步请求等函数，最后调用 commit 更改状态\n            setTimeout(() => {\n              commit('userToken', 'my_token')\n            }, 300)\n          }\n        }\n        \n        // 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation\n        // mutation 必须是同步函数\n        // 全局访问 this.$store.commit('...', value)\n        const mutations = {\n          userToken: (state, payload) => {\n            state.token = payload\n          }\n        }\n        export default {\n          state,\n          getters,\n          actions,\n          mutations\n        }\n      ")]),e._v(" "),t("p",[e._v("（3）在主文件\n        "),t("code",[e._v("main.js")]),e._v("中引入：")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        import store from './store'\n\n        new Vue({\n          ...\n          store,\n          ...\n        })\n      ")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor5"}},[e._v("5、引入 axios")]),e._v(" "),t("div",[e._v("（1）安装 axios")]),e._v(" "),t("p",[t("code",[e._v("npm install -S axios vue-axios")])]),e._v(" "),t("div",[e._v("（2）在\n        "),t("code",[e._v("src")]),e._v("下新建\n        "),t("code",[e._v("api")]),e._v("目录，并新建 axios.js 文件")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        const service = axios.create({\n          timeout: 30000\n          // baseURL: 'https://some-domain.com/api/',\n          // headers: {'X-Requested-With': 'XMLHttpRequest'}\n        })\n\n        // http request 拦截器\n        service.interceptors.request.use(config => {\n          // ...\n          return config\n        }, err => {\n          return Promise.reject(err)\n        })\n\n        // http response 响应拦截器\n        service.interceptors.response.use(\n          response => {\n            return response\n          },\n          error => {\n            // 异常的全局处理\n            // ...\n            return Promise.reject(error.response)\n          }\n        )\n\n        export default service\n      ")]),e._v(" "),t("div",[e._v("（3）在主文件\n        "),t("code",[e._v("main.js")]),e._v("中引入：")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        import VueAxios from 'vue-axios'\n        import axios from './api/axios'\n\n        // 组件中使用 this.$http 调用 axios\n        Vue.use(VueAxios, axios)\n      ")]),e._v(" "),t("p",[e._v("若统一管理API接口，可将接口配置全放于\n        "),t("code",[e._v("api")]),e._v("目录，使用时按需导入")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor6"}},[e._v("6、配置全局工具函数 utils")]),e._v(" "),t("div",[e._v("（1）在\n        "),t("code",[e._v("src")]),e._v("中新建\n        "),t("code",[e._v("utils")]),e._v("目录，并新建\n        "),t("code",[e._v("index.js")]),e._v("文件：")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("        \n        // 动态引入 utils 下的所有文件，添加到全局 uitls 对象下\n        const files = require.context('.', true, /\\.js$/)\n\n        let utils = {}\n        files.keys().forEach(key => {\n          if (key === './index.js') return\n          for (let k in files(key).default) {\n            utils[k] = files(key).default[k]\n          }\n        })\n        const install = function (Vue) {\n          if (install.installed) return\n          // 设置 Vue 全局对象，在组件中可用 this.$utils 引用\n          Vue.prototype.$utils = utils\n        }\n        \n        if (typeof window !== 'undefined' && window.Vue) {\n          install(window.Vue)\n        }\n        export default {\n          install\n        }\n      ")]),e._v(" "),t("div",[e._v("（2）在\n        "),t("code",[e._v("main.js")]),e._v("中引入，在组件中就可以用 this.$utils 调用了")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        import utils from './utils'\n\n        Vue.use(utils)\n      ")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor7"}},[e._v("7、全局引入 element-ui（也可以不在这里引入，在组件按需引入）")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        import ElementUI from 'element-ui'\n\n        Vue.use(ElementUI)\n      ")]),e._v(" "),t("h5",{staticClass:"font-weight-bold",attrs:{id:"anchor8"}},[e._v("8、引入样式及字体图标")]),e._v(" "),t("p",[e._v("项目采用 scss 作为默认的样式预处理器，并引入\n        "),t("code",[e._v("bootstrap 4")]),e._v(" "),t("code",[e._v("font-awesome")]),e._v(" "),t("code",[e._v("element-ui")]),e._v("样式，在\n        "),t("code",[e._v("assets")]),e._v("中新建\n        "),t("code",[e._v("scss")]),e._v("目录，新按 scss 样式构建样式文件：\n      ")]),e._v(" "),t("div",[e._v("（1）安装插件")]),e._v(" "),t("p",[t("code",[e._v("npm install -S bootstrap@4.0.0-beta.2 font-awesome")])]),e._v(" "),t("div",[e._v("（2）新建\n        "),t("code",[e._v("_variables.scss")]),e._v("，设置样式的全局变量，可覆盖\n        "),t("code",[e._v("bootstarp")]),e._v(" "),t("code",[e._v("element-ui")]),e._v("变量")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n        $primary:           #57b231;\n\n        $body-bg:           #f9f9f9;\n        $font-family-base:  Helvetica, 'Hiragino Sans GB', 'Microsoft Yahei', '微软雅黑', Arial, sans-serif !default;\n      ")]),e._v(" "),t("div",[e._v("（3）新建\n        "),t("code",[e._v("index.scss")]),e._v("并引入样式")]),e._v(" "),t("pre",{staticClass:"border rounded bg-light"},[e._v("\n          @import 'variables.scss';\n\n          // 引入 bootstrap\n          @import \"../../../node_modules/bootstrap/scss/bootstrap.scss\";\n          // 引入 element-ui\n          // 改变主题色变量\n          $--color-primary: #57b231;\n          // 改变icon 字体路径变量，必需\n          $--font-path: '../../../node_modules/element-ui/lib/theme-chalk/fonts';\n          @import \"../../../node_modules/element-ui/packages/theme-chalk/src/index\";\n\n          // 引入 font-awesome\n          // 改变 icon 字体路径变量，必需\n          $fa-font-path: '../../../node_modules/font-awesome/fonts';\n          @import \"../../../node_modules/font-awesome/scss/font-awesome.scss\";\n      ")]),e._v(" "),t("p",[e._v("（4）在\n        "),t("code",[e._v("main.js")]),e._v("中引入\n        "),t("code",[e._v("import '@/assets/scss/index.scss'")]),e._v("，组件中的样式写在\n        "),t("code",[e._v("style")]),e._v("标签中，并加上\n        "),t("code",[e._v("scoped")]),e._v(" 属性")])])])])}]};var s=t("VU/8")({components:{},props:{},data:function(){return{}},computed:{},watch:{},created:function(){},mounted:function(){},methods:{}},o,!1,function(e){t("8/5j")},"data-v-41b9f3c1",null);n.default=s.exports}});
//# sourceMappingURL=3.b31eec4797cd6731e091.js.map