{"version":3,"sources":["webpack:///src/views/Build.vue","webpack:///./src/views/Build.vue?eb2c","webpack:///./src/views/Build.vue"],"names":["views_Build","render","this","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","_v","attrs","href","id","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"4HA6ZA,IC1ZAA,GADiBC,OAFjB,WAA0BC,KAAaC,eAAbD,KAAuCE,MAAAC,GAAwB,OAA/DH,KAA+DI,GAAA,IAExEC,iBADjB,WAAoC,IAAAC,EAAAN,KAAaO,EAAAD,EAAAL,eAA0BE,EAAAG,EAAAJ,MAAAC,IAAAI,EAAwB,OAAAJ,EAAA,OAAiBK,YAAA,cAAwBL,EAAA,OAAYK,YAAA,cAAwBL,EAAA,OAAYK,YAAA,cAAwBL,EAAA,MAAWK,YAAA,SAAmBL,EAAA,KAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAG,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,gCAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,MAAAA,EAAA,KAAqJO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,0BAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAAgEO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,eAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAAqDO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,uBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAA6DO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,iBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAAuDO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,kBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAAwDO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,wBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAA8DO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,yBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAAA,EAAA,KAA+DO,OAAOC,KAAA,cAAmBL,EAAAG,GAAA,qBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAmDK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,wBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAuDK,YAAA,4BAAsCF,EAAAG,GAAA,wFAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,sBAAAN,EAAA,QAAAG,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,gBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,cAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAmRK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,aAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,eAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,sBAAAN,EAAA,QAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,uCAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA+NK,YAAA,4BAAsCF,EAAAG,GAAA,2UAA4RH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,gBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,mBAAAN,EAAA,QAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,+CAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAuQK,YAAA,4BAAsCF,EAAAG,GAAA,0MAAsMH,EAAAG,GAAA,KAAAN,EAAA,MAAkCK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,qBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,gBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,mBAAAN,EAAA,QAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,qBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAmNK,YAAA,4BAAsCF,EAAAG,GAAA,0zBAAqzBH,EAAAG,GAAA,KAAAN,EAAA,KAAAA,EAAA,QAAAG,EAAAG,GAAA,0BAAAH,EAAAG,GAAA,qBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAgIK,YAAA,4BAAsCF,EAAAG,GAAA,wxBAAoxBH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,2BAAAN,EAAA,QAAAG,EAAAG,GAAA,UAAAH,EAAAG,GAAA,SAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA2LK,YAAA,4BAAsCF,EAAAG,GAAA,qQAAiQH,EAAAG,GAAA,KAAAN,EAAA,MAAkCK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,eAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAA,EAAA,QAAAG,EAAAG,GAAA,2BAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,SAAAH,EAAAG,GAAA,mBAAAN,EAAA,QAAAG,EAAAG,GAAA,WAAAH,EAAAG,GAAA,sBAAAN,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,QAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA8ZK,YAAA,4BAAsCF,EAAAG,GAAA,4RAAuRH,EAAAG,GAAA,KAAAN,EAAA,KAAAA,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,yBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAuHK,YAAA,4BAAsCF,EAAAG,GAAA,2mCAAumCH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,qBAAAN,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,UAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAmIK,YAAA,4BAAsCF,EAAAG,GAAA,oIAA+HH,EAAAG,GAAA,KAAAN,EAAA,MAAmCK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,iBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAA,EAAA,QAAAG,EAAAG,GAAA,sCAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,SAAAH,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,SAAAH,EAAAG,GAAA,wBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAqUK,YAAA,4BAAsCF,EAAAG,GAAA,ytBAAwqBH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,qBAAAN,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,UAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAkLK,YAAA,4BAAsCF,EAAAG,GAAA,2KAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,kCAAAN,EAAA,QAAAG,EAAAG,GAAA,SAAAH,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAwTK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,sBAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,SAAAH,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,WAAAH,EAAAG,GAAA,oBAAAN,EAAA,QAAAG,EAAAG,GAAA,cAAAH,EAAAG,GAAA,SAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA+PK,YAAA,4BAAsCF,EAAAG,GAAA,isBAA6rBH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,kCAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA0JK,YAAA,4BAAsCF,EAAAG,GAAA,6EAAAH,EAAAG,GAAA,KAAAN,EAAA,MAA2GK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,0CAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAyEK,YAAA,4BAAsCF,EAAAG,GAAA,wFAAAH,EAAAG,GAAA,KAAAN,EAAA,MAAsHK,YAAA,mBAAAE,OAAsCE,GAAA,aAAgBN,EAAAG,GAAA,iBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,uCAAAN,EAAA,QAAAG,EAAAG,GAAA,iBAAAH,EAAAG,GAAA,KAAAN,EAAA,QAAAG,EAAAG,GAAA,kBAAAH,EAAAG,GAAA,KAAAN,EAAA,QAAAG,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,UAAAH,EAAAG,GAAA,kCAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAAA,EAAA,QAAAG,EAAAG,GAAA,0DAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,mBAAAN,EAAA,QAAAG,EAAAG,GAAA,qBAAAH,EAAAG,GAAA,4BAAAN,EAAA,QAAAG,EAAAG,GAAA,eAAAH,EAAAG,GAAA,KAAAN,EAAA,QAAAG,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,QAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAyuBK,YAAA,4BAAsCF,EAAAG,GAAA,+MAA2MH,EAAAG,GAAA,KAAAN,EAAA,OAAAG,EAAAG,GAAA,mBAAAN,EAAA,QAAAG,EAAAG,GAAA,gBAAAH,EAAAG,GAAA,WAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAuIK,YAAA,4BAAsCF,EAAAG,GAAA,spBAAkpBH,EAAAG,GAAA,KAAAN,EAAA,KAAAG,EAAAG,GAAA,kBAAAN,EAAA,QAAAG,EAAAG,GAAA,aAAAH,EAAAG,GAAA,iBAAAN,EAAA,QAAAG,EAAAG,GAAA,uCAAAH,EAAAG,GAAA,uBAAAN,EAAA,QAAAG,EAAAG,GAAA,WAAAH,EAAAG,GAAA,qBAAAN,EAAA,QAAAG,EAAAG,GAAA,YAAAH,EAAAG,GAAA,kBCEl8Y,IAcAI,EAdAC,EAAA,OAcAC,8HAEAjB,GATA,EAVA,SAAAkB,GACAF,EAAA,SAaA,kBAEA,MAUAG,EAAA,QAAAJ,EAAA","file":"static/js/3.b31eec4797cd6731e091.js","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"card mb-3\">\n      <div class=\"card-body\">\n        <h4 class=\"mt-3\">\n          <b>项目搭建过程</b>\n        </h4>\n        <hr>\n\n        <p>基于 vue-cli 脚手架构建，记录一下配置的过程</p>\n\n        <ul>\n          <li>\n            <a href=\"#anchor1\">1、vue-cli 生成项目基本结构</a>\n          </li>\n          <li>\n            <a href=\"#anchor2\">2、API代理</a>\n          </li>\n          <li>\n            <a href=\"#anchor3\">3、配置 vue-router</a>\n          </li>\n          <li>\n            <a href=\"#anchor4\">4、配置 vuex</a>\n          </li>\n          <li>\n            <a href=\"#anchor5\">5、引入 axios</a>\n          </li>\n          <li>\n            <a href=\"#anchor6\">6、配置全局工具函数 utils</a>\n          </li>\n          <li>\n            <a href=\"#anchor7\">7、全局引入 element-ui</a>\n          </li>\n          <li>\n            <a href=\"#anchor8\">8、引入样式及字体图标</a>\n          </li>\n        </ul>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor1\">1、vue-cli 生成项目基本结构</h5>\n        <pre class=\"border rounded bg-light\">\n    \n          npm install -g vue-cli\n\n          vue init webpack vue-element\n        </pre>\n        <p>生成中，选择使用\n          <code>vue-router</code> 及\n          <code>eslint</code>，不使用单元测试</p>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor2\">2、API代理</h5>\n        <p>在\n          <code>config</code> 目录下新建文件\n          <code>proxy.js</code>，添加 http-proxy-middleware 远程API接口</p>\n\n        <pre class=\"border rounded bg-light\">\n\n          const api = [\n            '/auth',\n            '/api'\n          ]\n          \n          const option = {\n            target: 'http://some-domain.com',\n            changeOrigin: true\n          }\n\n          let proxy = {}\n          api.forEach(item => { proxy[item] = option })\n          \n          module.exports = proxy\n        </pre>\n\n        <p>修改\n          <code>config</code> 目录中的\n          <code>index.js</code> 配置：proxyTable，并把 autoOpenBrowser 置为 true</p>\n\n        <pre class=\"border rounded bg-light\">\n\n          const proxy = require('./proxy')\n\n          ...\n          \n          dev: {\n            ...\n            proxyTable: proxy,\n            autoOpenBrowser: true,\n            ...\n          }\n        </pre>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor3\">3、配置 vue-router</h5>\n        <p>更改\n          <code>router</code> 目录下的\n          <code>index.js</code> 文件，加上勾子函数及路由配置</p>\n        <pre class=\"border rounded bg-light\">\n\n          // 静态路由\n          import routes from './routes'\n\n          // 路由跳转前的勾子函数，可做权限验证、动画、浏览器导航历史记录等\n          import beforeEachHooks from './before-each-hooks'\n\n          let router = new Router({\n            // 去掉url上的/#/号，需要后台(nginx等)做相应配置：404时配置到/index.html，由vue的前端路由*处理\n            mode: 'history',\n          \n            // router-link匹配路由时的样式，用于选中时的样式处理\n            linkActiveClass: 'active',\n            linkExactActiveClass: 'exact-active',\n          \n            // 静态路由\n            routes: routes,\n          \n            // 路由跳转时，返回到顶部\n            scrollBehavior: (to, from, savedPosition) => {\n              return savedPosition || { x: 0, y: 0 }\n            }\n          })\n\n          // 路由勾子数据\n          Object.keys(beforeEachHooks).forEach(hook => {\n            router.beforeEach(beforeEachHooks[hook])\n          })\n        </pre>\n\n        <p>\n          <code>before-each-hooks.js</code>中处理页面title和权限验证</p>\n\n        <pre class=\"border rounded bg-light\">\n\n          checkLoginAuth(to, from, next) {\n            // 设置页面的title\n            if (to.meta.title) {\n              document.title = to.meta.title\n            }\n        \n            // 对设置了requiresAuth的meta路由验证权限\n            if (to.matched.some(record => record.meta.requiresAuth)) {\n              // 权限验证方法，根据业务需要自行编写\n              let permission = getPermission()\n\n              if (!permission) {\n                next({\n                  path: '/login',\n                  query: { redirect: to.fullPath }\n                })\n              } else {\n                next()\n              }\n            } else {\n              // 不需要权限的路由，一定要调用 next()\n              next()\n            }\n\n            function getPermission() {\n              // ...验证权限\n\n              return true\n            }\n          }\n        </pre>\n\n        <p>然后在\n          <code>routes</code>中为需要权限验证的路由添加\n          <code>meta</code>元信息</p>\n        <pre class=\"border rounded bg-light\">\n          path: '/admin',\n          component: r => require.ensure([], () => r(require('@/views/Admin')), 'app-admin'),\n          meta: {\n            requiresAuth: true,\n            // 根据业务设置权限信息\n            authorization: 'org_corp,org_admin'\n          }\n        </pre>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor4\">4、配置 vuex</h5>\n        <div>（1）安装 vuex</div>\n        <p>\n          <code>npm install -S vuex</code>\n        </p>\n        <p>（2）在\n          <code>src</code>目录下新建\n          <code>store</code>目录，在其中新建\n          <code>modules</code>目录和\n          <code>index.js</code>文件</p>\n        <pre class=\"border rounded bg-light\">\n\n          // 获取 ./modules 目录下所有文件，作为 vuex 的一个模块\n          const files = require.context('./modules/', true, /\\.js$/)\n          ...\n\n          export default new Vuex.Store({\n            modules: modules,\n            strict: process.env.NODE_ENV !== 'production'\n          })\n        </pre>\n        <p>\n          <code>modules</code>目录中的文件格式参考 vuex 官网：</p>\n        <pre class=\"border rounded bg-light\">\n\n          // 包含了全部的应用层级状态，全局访问 this.$store.state.\n          // 虽然将所有的状态放到Vuex会使状态变化更易显示和易调试，但也会使代码变得冗长和不直观。\n          // 如果有些状态严格属于单个组件，最好还是作为组件的本地状态。\n          const state = {\n            token: null\n          }\n          // store 的计算属性，全局访问 this.$store.getters.\n          const getters = {\n            userToken: state => state.token\n          }\n          \n          // Action 类似于 mutation，不同在于：\n          // Action 提交的是 mutation，而不是直接变更状态\n          // Action 可以包含任意异步操作\n          // 全局访问 this.$store.dispatch('')\n          const actions = {\n            getToken({ commit }) {\n              // 可包含异步请求等函数，最后调用 commit 更改状态\n              setTimeout(() => {\n                commit('userToken', 'my_token')\n              }, 300)\n            }\n          }\n          \n          // 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation\n          // mutation 必须是同步函数\n          // 全局访问 this.$store.commit('...', value)\n          const mutations = {\n            userToken: (state, payload) => {\n              state.token = payload\n            }\n          }\n          export default {\n            state,\n            getters,\n            actions,\n            mutations\n          }\n        </pre>\n        <p>（3）在主文件\n          <code>main.js</code>中引入：</p>\n        <pre class=\"border rounded bg-light\">\n\n          import store from './store'\n\n          new Vue({\n            ...\n            store,\n            ...\n          })\n        </pre>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor5\">5、引入 axios</h5>\n        <div>（1）安装 axios</div>\n        <p>\n          <code>npm install -S axios vue-axios</code>\n        </p>\n        <div>（2）在\n          <code>src</code>下新建\n          <code>api</code>目录，并新建 axios.js 文件</div>\n        <pre class=\"border rounded bg-light\">\n\n          const service = axios.create({\n            timeout: 30000\n            // baseURL: 'https://some-domain.com/api/',\n            // headers: {'X-Requested-With': 'XMLHttpRequest'}\n          })\n\n          // http request 拦截器\n          service.interceptors.request.use(config => {\n            // ...\n            return config\n          }, err => {\n            return Promise.reject(err)\n          })\n\n          // http response 响应拦截器\n          service.interceptors.response.use(\n            response => {\n              return response\n            },\n            error => {\n              // 异常的全局处理\n              // ...\n              return Promise.reject(error.response)\n            }\n          )\n\n          export default service\n        </pre>\n        <div>（3）在主文件\n          <code>main.js</code>中引入：</div>\n        <pre class=\"border rounded bg-light\">\n\n          import VueAxios from 'vue-axios'\n          import axios from './api/axios'\n\n          // 组件中使用 this.$http 调用 axios\n          Vue.use(VueAxios, axios)\n        </pre>\n        <p>若统一管理API接口，可将接口配置全放于\n          <code>api</code>目录，使用时按需导入</p>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor6\">6、配置全局工具函数 utils</h5>\n        <div>（1）在\n          <code>src</code>中新建\n          <code>utils</code>目录，并新建\n          <code>index.js</code>文件：</div>\n        <pre class=\"border rounded bg-light\">\n          \n          // 动态引入 utils 下的所有文件，添加到全局 uitls 对象下\n          const files = require.context('.', true, /\\.js$/)\n\n          let utils = {}\n          files.keys().forEach(key => {\n            if (key === './index.js') return\n            for (let k in files(key).default) {\n              utils[k] = files(key).default[k]\n            }\n          })\n          const install = function (Vue) {\n            if (install.installed) return\n            // 设置 Vue 全局对象，在组件中可用 this.$utils 引用\n            Vue.prototype.$utils = utils\n          }\n          \n          if (typeof window !== 'undefined' && window.Vue) {\n            install(window.Vue)\n          }\n          export default {\n            install\n          }\n        </pre>\n        <div>（2）在\n          <code>main.js</code>中引入，在组件中就可以用 this.$utils 调用了</div>\n        <pre class=\"border rounded bg-light\">\n\n          import utils from './utils'\n\n          Vue.use(utils)\n        </pre>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor7\">7、全局引入 element-ui（也可以不在这里引入，在组件按需引入）</h5>\n        <pre class=\"border rounded bg-light\">\n\n          import ElementUI from 'element-ui'\n\n          Vue.use(ElementUI)\n        </pre>\n\n        <h5 class=\"font-weight-bold\"\n            id=\"anchor8\">8、引入样式及字体图标</h5>\n        <p>项目采用 scss 作为默认的样式预处理器，并引入\n          <code>bootstrap 4</code>\n          <code>font-awesome</code>\n          <code>element-ui</code>样式，在\n          <code>assets</code>中新建\n          <code>scss</code>目录，新按 scss 样式构建样式文件：\n        </p>\n        <div>（1）安装插件</div>\n        <p>\n          <code>npm install -S bootstrap@4.0.0-beta.2 font-awesome</code>\n        </p>\n        <div>（2）新建\n          <code>_variables.scss</code>，设置样式的全局变量，可覆盖\n          <code>bootstarp</code>\n          <code>element-ui</code>变量</div>\n        <pre class=\"border rounded bg-light\">\n\n          $primary:           #57b231;\n\n          $body-bg:           #f9f9f9;\n          $font-family-base:  Helvetica, 'Hiragino Sans GB', 'Microsoft Yahei', '微软雅黑', Arial, sans-serif !default;\n        </pre>\n        <div>（3）新建\n          <code>index.scss</code>并引入样式</div>\n        <pre class=\"border rounded bg-light\">\n\n            @import 'variables.scss';\n\n            // 引入 bootstrap\n            @import \"../../../node_modules/bootstrap/scss/bootstrap.scss\";\n            // 引入 element-ui\n            // 改变主题色变量\n            $--color-primary: #57b231;\n            // 改变icon 字体路径变量，必需\n            $--font-path: '../../../node_modules/element-ui/lib/theme-chalk/fonts';\n            @import \"../../../node_modules/element-ui/packages/theme-chalk/src/index\";\n\n            // 引入 font-awesome\n            // 改变 icon 字体路径变量，必需\n            $fa-font-path: '../../../node_modules/font-awesome/fonts';\n            @import \"../../../node_modules/font-awesome/scss/font-awesome.scss\";\n        </pre>\n        <p>（4）在\n          <code>main.js</code>中引入\n          <code>import '@/assets/scss/index.scss'</code>，组件中的样式写在\n          <code>style</code>标签中，并加上\n          <code>scoped</code> 属性</p>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  components: {\n\n  },\n\n  props: {\n\n  },\n\n  data() {\n    return {\n\n    }\n  },\n\n  computed: {\n\n  },\n\n  watch: {\n\n  },\n\n  created() {\n\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/Build.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"card mb-3\"},[_c('div',{staticClass:\"card-body\"},[_c('h4',{staticClass:\"mt-3\"},[_c('b',[_vm._v(\"项目搭建过程\")])]),_vm._v(\" \"),_c('hr'),_vm._v(\" \"),_c('p',[_vm._v(\"基于 vue-cli 脚手架构建，记录一下配置的过程\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#anchor1\"}},[_vm._v(\"1、vue-cli 生成项目基本结构\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor2\"}},[_vm._v(\"2、API代理\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor3\"}},[_vm._v(\"3、配置 vue-router\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor4\"}},[_vm._v(\"4、配置 vuex\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor5\"}},[_vm._v(\"5、引入 axios\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor6\"}},[_vm._v(\"6、配置全局工具函数 utils\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor7\"}},[_vm._v(\"7、全局引入 element-ui\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"#anchor8\"}},[_vm._v(\"8、引入样式及字体图标\")])])]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor1\"}},[_vm._v(\"1、vue-cli 生成项目基本结构\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"  \\n        npm install -g vue-cli\\n\\n        vue init webpack vue-element\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"生成中，选择使用\\n        \"),_c('code',[_vm._v(\"vue-router\")]),_vm._v(\" 及\\n        \"),_c('code',[_vm._v(\"eslint\")]),_vm._v(\"，不使用单元测试\")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor2\"}},[_vm._v(\"2、API代理\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在\\n        \"),_c('code',[_vm._v(\"config\")]),_vm._v(\" 目录下新建文件\\n        \"),_c('code',[_vm._v(\"proxy.js\")]),_vm._v(\"，添加 http-proxy-middleware 远程API接口\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        const api = [\\n          '/auth',\\n          '/api'\\n        ]\\n        \\n        const option = {\\n          target: 'http://some-domain.com',\\n          changeOrigin: true\\n        }\\n\\n        let proxy = {}\\n        api.forEach(item => { proxy[item] = option })\\n        \\n        module.exports = proxy\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"修改\\n        \"),_c('code',[_vm._v(\"config\")]),_vm._v(\" 目录中的\\n        \"),_c('code',[_vm._v(\"index.js\")]),_vm._v(\" 配置：proxyTable，并把 autoOpenBrowser 置为 true\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        const proxy = require('./proxy')\\n\\n        ...\\n        \\n        dev: {\\n          ...\\n          proxyTable: proxy,\\n          autoOpenBrowser: true,\\n          ...\\n        }\\n      \")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor3\"}},[_vm._v(\"3、配置 vue-router\")]),_vm._v(\" \"),_c('p',[_vm._v(\"更改\\n        \"),_c('code',[_vm._v(\"router\")]),_vm._v(\" 目录下的\\n        \"),_c('code',[_vm._v(\"index.js\")]),_vm._v(\" 文件，加上勾子函数及路由配置\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        // 静态路由\\n        import routes from './routes'\\n\\n        // 路由跳转前的勾子函数，可做权限验证、动画、浏览器导航历史记录等\\n        import beforeEachHooks from './before-each-hooks'\\n\\n        let router = new Router({\\n          // 去掉url上的/#/号，需要后台(nginx等)做相应配置：404时配置到/index.html，由vue的前端路由*处理\\n          mode: 'history',\\n        \\n          // router-link匹配路由时的样式，用于选中时的样式处理\\n          linkActiveClass: 'active',\\n          linkExactActiveClass: 'exact-active',\\n        \\n          // 静态路由\\n          routes: routes,\\n        \\n          // 路由跳转时，返回到顶部\\n          scrollBehavior: (to, from, savedPosition) => {\\n            return savedPosition || { x: 0, y: 0 }\\n          }\\n        })\\n\\n        // 路由勾子数据\\n        Object.keys(beforeEachHooks).forEach(hook => {\\n          router.beforeEach(beforeEachHooks[hook])\\n        })\\n      \")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"before-each-hooks.js\")]),_vm._v(\"中处理页面title和权限验证\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        checkLoginAuth(to, from, next) {\\n          // 设置页面的title\\n          if (to.meta.title) {\\n            document.title = to.meta.title\\n          }\\n      \\n          // 对设置了requiresAuth的meta路由验证权限\\n          if (to.matched.some(record => record.meta.requiresAuth)) {\\n            // 权限验证方法，根据业务需要自行编写\\n            let permission = getPermission()\\n\\n            if (!permission) {\\n              next({\\n                path: '/login',\\n                query: { redirect: to.fullPath }\\n              })\\n            } else {\\n              next()\\n            }\\n          } else {\\n            // 不需要权限的路由，一定要调用 next()\\n            next()\\n          }\\n\\n          function getPermission() {\\n            // ...验证权限\\n\\n            return true\\n          }\\n        }\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"然后在\\n        \"),_c('code',[_vm._v(\"routes\")]),_vm._v(\"中为需要权限验证的路由添加\\n        \"),_c('code',[_vm._v(\"meta\")]),_vm._v(\"元信息\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"        path: '/admin',\\n        component: r => require.ensure([], () => r(require('@/views/Admin')), 'app-admin'),\\n        meta: {\\n          requiresAuth: true,\\n          // 根据业务设置权限信息\\n          authorization: 'org_corp,org_admin'\\n        }\\n      \")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor4\"}},[_vm._v(\"4、配置 vuex\")]),_vm._v(\" \"),_c('div',[_vm._v(\"（1）安装 vuex\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"npm install -S vuex\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"（2）在\\n        \"),_c('code',[_vm._v(\"src\")]),_vm._v(\"目录下新建\\n        \"),_c('code',[_vm._v(\"store\")]),_vm._v(\"目录，在其中新建\\n        \"),_c('code',[_vm._v(\"modules\")]),_vm._v(\"目录和\\n        \"),_c('code',[_vm._v(\"index.js\")]),_vm._v(\"文件\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        // 获取 ./modules 目录下所有文件，作为 vuex 的一个模块\\n        const files = require.context('./modules/', true, /\\\\.js$/)\\n        ...\\n\\n        export default new Vuex.Store({\\n          modules: modules,\\n          strict: process.env.NODE_ENV !== 'production'\\n        })\\n      \")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"modules\")]),_vm._v(\"目录中的文件格式参考 vuex 官网：\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        // 包含了全部的应用层级状态，全局访问 this.$store.state.\\n        // 虽然将所有的状态放到Vuex会使状态变化更易显示和易调试，但也会使代码变得冗长和不直观。\\n        // 如果有些状态严格属于单个组件，最好还是作为组件的本地状态。\\n        const state = {\\n          token: null\\n        }\\n        // store 的计算属性，全局访问 this.$store.getters.\\n        const getters = {\\n          userToken: state => state.token\\n        }\\n        \\n        // Action 类似于 mutation，不同在于：\\n        // Action 提交的是 mutation，而不是直接变更状态\\n        // Action 可以包含任意异步操作\\n        // 全局访问 this.$store.dispatch('')\\n        const actions = {\\n          getToken({ commit }) {\\n            // 可包含异步请求等函数，最后调用 commit 更改状态\\n            setTimeout(() => {\\n              commit('userToken', 'my_token')\\n            }, 300)\\n          }\\n        }\\n        \\n        // 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation\\n        // mutation 必须是同步函数\\n        // 全局访问 this.$store.commit('...', value)\\n        const mutations = {\\n          userToken: (state, payload) => {\\n            state.token = payload\\n          }\\n        }\\n        export default {\\n          state,\\n          getters,\\n          actions,\\n          mutations\\n        }\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"（3）在主文件\\n        \"),_c('code',[_vm._v(\"main.js\")]),_vm._v(\"中引入：\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        import store from './store'\\n\\n        new Vue({\\n          ...\\n          store,\\n          ...\\n        })\\n      \")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor5\"}},[_vm._v(\"5、引入 axios\")]),_vm._v(\" \"),_c('div',[_vm._v(\"（1）安装 axios\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"npm install -S axios vue-axios\")])]),_vm._v(\" \"),_c('div',[_vm._v(\"（2）在\\n        \"),_c('code',[_vm._v(\"src\")]),_vm._v(\"下新建\\n        \"),_c('code',[_vm._v(\"api\")]),_vm._v(\"目录，并新建 axios.js 文件\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        const service = axios.create({\\n          timeout: 30000\\n          // baseURL: 'https://some-domain.com/api/',\\n          // headers: {'X-Requested-With': 'XMLHttpRequest'}\\n        })\\n\\n        // http request 拦截器\\n        service.interceptors.request.use(config => {\\n          // ...\\n          return config\\n        }, err => {\\n          return Promise.reject(err)\\n        })\\n\\n        // http response 响应拦截器\\n        service.interceptors.response.use(\\n          response => {\\n            return response\\n          },\\n          error => {\\n            // 异常的全局处理\\n            // ...\\n            return Promise.reject(error.response)\\n          }\\n        )\\n\\n        export default service\\n      \")]),_vm._v(\" \"),_c('div',[_vm._v(\"（3）在主文件\\n        \"),_c('code',[_vm._v(\"main.js\")]),_vm._v(\"中引入：\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        import VueAxios from 'vue-axios'\\n        import axios from './api/axios'\\n\\n        // 组件中使用 this.$http 调用 axios\\n        Vue.use(VueAxios, axios)\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"若统一管理API接口，可将接口配置全放于\\n        \"),_c('code',[_vm._v(\"api\")]),_vm._v(\"目录，使用时按需导入\")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor6\"}},[_vm._v(\"6、配置全局工具函数 utils\")]),_vm._v(\" \"),_c('div',[_vm._v(\"（1）在\\n        \"),_c('code',[_vm._v(\"src\")]),_vm._v(\"中新建\\n        \"),_c('code',[_vm._v(\"utils\")]),_vm._v(\"目录，并新建\\n        \"),_c('code',[_vm._v(\"index.js\")]),_vm._v(\"文件：\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"        \\n        // 动态引入 utils 下的所有文件，添加到全局 uitls 对象下\\n        const files = require.context('.', true, /\\\\.js$/)\\n\\n        let utils = {}\\n        files.keys().forEach(key => {\\n          if (key === './index.js') return\\n          for (let k in files(key).default) {\\n            utils[k] = files(key).default[k]\\n          }\\n        })\\n        const install = function (Vue) {\\n          if (install.installed) return\\n          // 设置 Vue 全局对象，在组件中可用 this.$utils 引用\\n          Vue.prototype.$utils = utils\\n        }\\n        \\n        if (typeof window !== 'undefined' && window.Vue) {\\n          install(window.Vue)\\n        }\\n        export default {\\n          install\\n        }\\n      \")]),_vm._v(\" \"),_c('div',[_vm._v(\"（2）在\\n        \"),_c('code',[_vm._v(\"main.js\")]),_vm._v(\"中引入，在组件中就可以用 this.$utils 调用了\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        import utils from './utils'\\n\\n        Vue.use(utils)\\n      \")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor7\"}},[_vm._v(\"7、全局引入 element-ui（也可以不在这里引入，在组件按需引入）\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        import ElementUI from 'element-ui'\\n\\n        Vue.use(ElementUI)\\n      \")]),_vm._v(\" \"),_c('h5',{staticClass:\"font-weight-bold\",attrs:{\"id\":\"anchor8\"}},[_vm._v(\"8、引入样式及字体图标\")]),_vm._v(\" \"),_c('p',[_vm._v(\"项目采用 scss 作为默认的样式预处理器，并引入\\n        \"),_c('code',[_vm._v(\"bootstrap 4\")]),_vm._v(\" \"),_c('code',[_vm._v(\"font-awesome\")]),_vm._v(\" \"),_c('code',[_vm._v(\"element-ui\")]),_vm._v(\"样式，在\\n        \"),_c('code',[_vm._v(\"assets\")]),_vm._v(\"中新建\\n        \"),_c('code',[_vm._v(\"scss\")]),_vm._v(\"目录，新按 scss 样式构建样式文件：\\n      \")]),_vm._v(\" \"),_c('div',[_vm._v(\"（1）安装插件\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"npm install -S bootstrap@4.0.0-beta.2 font-awesome\")])]),_vm._v(\" \"),_c('div',[_vm._v(\"（2）新建\\n        \"),_c('code',[_vm._v(\"_variables.scss\")]),_vm._v(\"，设置样式的全局变量，可覆盖\\n        \"),_c('code',[_vm._v(\"bootstarp\")]),_vm._v(\" \"),_c('code',[_vm._v(\"element-ui\")]),_vm._v(\"变量\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n        $primary:           #57b231;\\n\\n        $body-bg:           #f9f9f9;\\n        $font-family-base:  Helvetica, 'Hiragino Sans GB', 'Microsoft Yahei', '微软雅黑', Arial, sans-serif !default;\\n      \")]),_vm._v(\" \"),_c('div',[_vm._v(\"（3）新建\\n        \"),_c('code',[_vm._v(\"index.scss\")]),_vm._v(\"并引入样式\")]),_vm._v(\" \"),_c('pre',{staticClass:\"border rounded bg-light\"},[_vm._v(\"\\n          @import 'variables.scss';\\n\\n          // 引入 bootstrap\\n          @import \\\"../../../node_modules/bootstrap/scss/bootstrap.scss\\\";\\n          // 引入 element-ui\\n          // 改变主题色变量\\n          $--color-primary: #57b231;\\n          // 改变icon 字体路径变量，必需\\n          $--font-path: '../../../node_modules/element-ui/lib/theme-chalk/fonts';\\n          @import \\\"../../../node_modules/element-ui/packages/theme-chalk/src/index\\\";\\n\\n          // 引入 font-awesome\\n          // 改变 icon 字体路径变量，必需\\n          $fa-font-path: '../../../node_modules/font-awesome/fonts';\\n          @import \\\"../../../node_modules/font-awesome/scss/font-awesome.scss\\\";\\n      \")]),_vm._v(\" \"),_c('p',[_vm._v(\"（4）在\\n        \"),_c('code',[_vm._v(\"main.js\")]),_vm._v(\"中引入\\n        \"),_c('code',[_vm._v(\"import '@/assets/scss/index.scss'\")]),_vm._v(\"，组件中的样式写在\\n        \"),_c('code',[_vm._v(\"style\")]),_vm._v(\"标签中，并加上\\n        \"),_c('code',[_vm._v(\"scoped\")]),_vm._v(\" 属性\")])])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-41b9f3c1\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Build.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-41b9f3c1\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Build.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Build.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Build.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-41b9f3c1\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Build.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-41b9f3c1\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Build.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}